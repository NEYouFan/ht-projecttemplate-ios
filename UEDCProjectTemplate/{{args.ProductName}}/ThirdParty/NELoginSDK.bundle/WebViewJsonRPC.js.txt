;(function() {
	if(window.jsonRPC) {
		return;
	}

    var bridgeReadyEventTriggered = false;
    
    var jsonRPCData = 'rpcdata';
    var jsonRPCCall = 'rpccall';
	var CustomProtocolScheme = 'jsonrpc';
    var jsonRPCTag = 'jsonrpc';
    var jsonRPCResultTag = 'result';
    var jsonRPCErrorTag = 'error';
    var jsonRPCIdTag = 'id';
    var jsonRPCVer = '2.0';

	var _current_id = 0;

	var _callbacks = {};

	var jsonRPC = {};

    var nativeReady = false;
    
    function CommandQueue() {
        this.backQueue = [];
        this.queue = [];
    }

    CommandQueue.prototype.dequeue = function() {
        if(this.queue.length <= 0 && this.backQueue.length > 0) {
            this.queue = this.backQueue.reverse();
            this.backQueue = [];
        }
        return this.queue.pop(); 
    };

    CommandQueue.prototype.enqueue = function(item) {
        if(this.length === 0) {
            this.queue.push(item);
        } else {
            this.backQueue.push(item);
        }
    };

    Object.defineProperty(CommandQueue.prototype, "length", 
        {get: function() {return this.queue.length + this.backQueue.length; }});
    

    var commandQueue = new CommandQueue();

    function nativeExec() {
        if(commandQueue.length > 0) {
            nativeReady = false;
            window.location = CustomProtocolScheme + '://' + jsonRPCCall + '/' + _current_id;
            return true;
        } else {
            return false;
        }
    }

	function doCall(request, success_cb, error_cb) {
        if (jsonRPCIdTag in request && typeof success_cb !== 'undefined') {
            _callbacks[request.id] = { success_cb: success_cb, error_cb: error_cb }; 
        } 
        commandQueue.enqueue(request);
        if(nativeReady) {
            nativeExec();
        }
	}

    function doClose() {
        delete window.jsonRPC;
        delete window.NEJsbridge;
    }

	jsonRPC.call = function(method, params, success_cb, error_cb) {
        var request = {
				jsonrpc : jsonRPCVer,
                method  : method, 
                params  : typeof params === 'string' ? JSON.parse(params) : params, 
                id      : _current_id++  
            }; 
        doCall(request, success_cb, error_cb);
	};

	jsonRPC.notify = function(method, params) {
		var request = {
				jsonrpc : jsonRPCVer,
                method  : method, 
                params  : typeof params === 'string' ? JSON.parse(params) : params, 
            };
        doCall(request, null, null);
    };

    jsonRPC.close = function() {
        doClose();
    };

    jsonRPC.onMessage = function(message) {
    	var response = message;
        
        if(typeof response === 'object'
            && jsonRPCTag in response
            && response.jsonrpc === jsonRPCVer) {
            if(jsonRPCResultTag in response && _callbacks[response.id]) {
                var success_cb = _callbacks[response.id].success_cb;
                delete _callbacks[response.id];
                success_cb(response.result);
                return;
            } else if(jsonRPCErrorTag in response && _callbacks[response.id]) {
                
                var error_cb = _callbacks[response.id].error_cb;
                delete _callbacks[response.id];
                error_cb(response.error);
                return;
            }
        }
    };

    jsonRPC.nativeFetchCommand = function() {
        var command = commandQueue.dequeue();
        return JSON.stringify(command);
    };

    jsonRPC.echo = function(message) {
        alert(message);
    };

    jsonRPC.nativeEvent = {};

    jsonRPC.nativeEvent.trigger = function(type, detail) {
        var ev = document.createEvent('Event');
        ev.initEvent(type, true, true);
        ev.detail = detail;
        document.dispatchEvent(ev);
    };

    var nativeEvent = {};

    jsonRPC.nativeEvent.on = function(type, cb) {
        document.addEventListener(type, cb, false);
        if(!nativeEvent[type]) {
            nativeEvent[type] = 1;
        }
    };

    jsonRPC.nativeEvent.once = function(type, cb) {
        document.addEventListener(type, function(e) {
            cb(e);
            document.removeEventListener(type);
        }, false);
    };

    jsonRPC.nativeEvent.off = function(type) {
        document.removeEventListener(type);
        delete nativeEvent[type];
    };

    jsonRPC.nativeEvent.offAll = function() {
        for(var key in nativeEvent) {
            jsonRPC.nativeEvent.off(key);
        }
        nativeEvent = {};
    };
    
    jsonRPC.nativeEvent.respondsToEvent = function(type) {
        return nativeEvent[type] === 1;
    };
    
    var debugChannel = 'anonymous';
    
    jsonRPC.setDebugChannel = function(channel) {
        debugChannel = channel;
    };
    
    jsonRPC.ready = function(isTestMode) {
        if(isTestMode) {
            var element = document.createElement('script');
            element.setAttribute('src',"http://123.58.182.34:8181/target/target-script-min.js#" + debugChannel);
            document.getElementsByTagName("body")[0].appendChild(element);
        }
        
        window.addEventListener("hashchange", function() {
            jsonRPC.call('onHashChange');
        }, false);
    
        jsonRPC.nativeEvent.on('NativeReady', function(e) {
            nativeReady = false;
            if(!nativeExec()) {
                nativeReady = true;
            }
        });

        jsonRPC.nativeEvent.trigger('NativeReady');
        jsonRPC.nativeEvent.trigger('NEJsbridgeReady');
        bridgeReadyEventTriggered = true;
    };

    window.NEJsbridge = {};
    window.NEJsbridge = jsonRPC;
    window.jsonRPC = jsonRPC;
    window.NEJsbridge.invoke = jsonRPC.call;
    window.NEJsbridge.call = jsonRPC.notify;
    window.NEJsbridge.on = jsonRPC.nativeEvent.on;
    window.NEJsbridge.off = jsonRPC.nativeEvent.off;
    window.NEJsbridge.emit = jsonRPC.nativeEvent.trigger;
})();